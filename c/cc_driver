#!/usr/bin/env zsh
set -o errexit
set -o nounset
set -o pipefail

C_COMPILER=${C_COMPILER:-cc}
BUILD_DIR=$(mktemp -d)
CFLAGS=${CFLAGS:-""}

function preprocess() {
	mkdir $BUILD_DIR/preprocess
	while read c_file; do
		local preprocessed_file=${$(basename $c_file)%.c}.i
		local out=$BUILD_DIR/preprocess/$preprocessed_file
		# I couldn't figure out how to make it worth with `cpp`.  Use `cc` because I'm a failure
		# cpp $c_file > $out
		printf "Preprocessing %s\n" $c_file 1>&2
		$C_COMPILER ${=CFLAGS} --preprocess $c_file -o $out
		echo $out
	done
}

function compile-to-asm() {
	mkdir $BUILD_DIR/assembly
	while read preprocessed_file; do
		local assembly_file=${$(basename $preprocessed_file)%.i}.S
		local out=$BUILD_DIR/assembly/$assembly_file
		printf "Compiling %s to ASM\n" $preprocessed_file 1>&2
		$C_COMPILER ${=CFLAGS} --assemble $preprocessed_file -o $out
		echo $out
	done
}

function assemble() {
	mkdir $BUILD_DIR/compiled
	while read assembly_file; do
		local compiled_file=${$(basename $assembly_file)%.S}.o
		local out=$BUILD_DIR/compiled/$compiled_file
		# $C_COMPILER ${=CFLAGS} --compile $assembly_file -o $out
		printf "Assembling %s\n" $assembly_file 1>&2
		as $assembly_file -o $out
		echo $out
	done
}

function link() {
	mkdir $BUILD_DIR/linked
	local compiled_file_names=""
	while read compiled_file; do
		compiled_file_names="${compiled_file_names} $compiled_file"
	done
	local out=$BUILD_DIR/linked/a.out
	printf "Linking %s\n" $compiled_file_names 1>&2
	if type ld > /dev/null 2>&1; then
		if [[ $OSTYPE == "darwin"* ]]; then
			ld -arch arm64 -platform_version macos 14.5 14.5\
				-L /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/lib -lSystem \
				${=compiled_file_names}\
				-o $out;
		else
			ld ${=compiled_file_names} -o $out \
				-lc -dynamic-linker /lib64/ld-linux-x86-64.so.2 /usr/lib/gcc/x86_64-linux-gnu/12/../../../x86_64-linux-gnu/Scrt1.o -L/usr/lib/gcc/x86_64-linux-gnu/12
		fi
	else
		$C_COMPILER ${=CFLAGS} ${=compiled_file_names} -o $out
	fi
		mv $out $OUTFILE
	echo $OUTFILE
}

function driver() {
	echo $files_separated_by_newline \
		| preprocess \
		| compile-to-asm \
		| assemble \
		| link
}

function main() {
	local files=""
	while [[ $# -gt 0 ]]; do
		case $1 in
			-o)
				OUTFILE="$2"
				shift
				shift
				;;
			-*)
				CFLAGS="$CFLAGS $1"
				shift
				;;
			*)
				if [[ -z $files ]]; then
					files=$1
				else
					files="$files $1"
				fi
				shift
				;;
		esac
	done
	CFLAGS="$CFLAGS -Wno-gnu-line-marker"
	if [[ -z ${OUTFILE:-""} ]]; then
		OUTFILE=a.out
	fi
	if [[ -z $files ]]; then
		echo "Usage: $0 [-o OUTFILE] [-CFLAGS] FILES"
		exit 1
	fi
	local files_separated_by_newline=$(echo $files | tr ' ' '\n')
	driver $files_separated_by_newline
}
main $@
